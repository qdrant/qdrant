[package]
name = "qdrant"
version = "1.12.6-dev"
description = "Qdrant - Vector Search engine"
authors = [
    "Andrey Vasnetsov <andrey@vasnetsov.com>",
    "Qdrant Team <info@qdrant.tech>",
]
readme = "README.md"
homepage = "https://qdrant.tech/"
repository = "https://github.com/qdrant/qdrant"
license = "Apache-2.0"
edition = "2021"
rust-version = "1.77"
default-run = "qdrant"

[lints]
workspace = true

[features]
default = ["web", "parking_lot"]
web = ["actix-web"]
multiling-chinese = ["segment/multiling-chinese"]
multiling-japanese = ["segment/multiling-japanese"]
multiling-korean = ["segment/multiling-korean"]
service_debug = ["parking_lot", "parking_lot/deadlock_detection"]
tracing = [
    "api/tracing",
    "collection/tracing",
    "segment/tracing",
    "storage/tracing",
]
console = ["console-subscriber"]
console-subscriber = ["tracing", "dep:console-subscriber"]
tracy = ["tracing-tracy"]
tracing-tracy = ["tracing", "dep:tracing-tracy"]
tokio-tracing = ["tokio/tracing"]
stacktrace = ["rstack-self"]
chaos-testing = []
data-consistency-check = ["collection/data-consistency-check"]
gpu = ["gpu/gpu", "segment/gpu"]
deb = []

[dev-dependencies]
serde_urlencoded = "0.7"
sealed_test = "1.1.0"

tempfile = { workspace = true }
rusty-hook = "^0.11.2"


[dependencies]
parking_lot = { workspace = true, optional = true }

thiserror = { workspace = true }
log = { workspace = true }
colored = "2"
serde = { workspace = true }
serde_json = { workspace = true }
chrono = { workspace = true }
rand = { workspace = true }
schemars = { workspace = true }
itertools = { workspace = true }
anyhow = "1.0.95"
futures = { workspace = true }
futures-util = { workspace = true }
clap = { version = "4.5.23", features = ["derive"] }
serde_cbor = { workspace = true }
uuid = { workspace = true }
sys-info = "0.9.1"
wal = { workspace = true }

config = "~0.14.1"

tokio = { workspace = true }

actix-cors = "0.7.0"
actix-files = "0.6.6"
actix-web = { version = "4.9.0", optional = true, features = ["rustls-0_23", "actix-tls"] }
actix-web-validator = "6.0.0"
tonic = { workspace = true }
tonic-reflection = { workspace = true }
tower = { version = "0.5.2", features = ["util"] }
tower-layer = "0.3.3"
reqwest = { workspace = true }
# rustls minor version must be synced with actix-web
rustls = { version = "0.23.20", default-features = false, features = ["logging", "std", "tls12", "ring"] }
rustls-pki-types = "1.10.1"
rustls-pemfile = "2.2.0"
prometheus = { version = "0.13.4", default-features = false }
validator = { workspace = true }
jsonwebtoken = "9.3.0"

# Consensus related crates
raft = { version = "0.7.0", features = ["prost-codec"], default-features = false }
slog = { version = "2.7.0", features = ["max_level_trace", "release_max_level_debug"] }
slog-stdlog = "4.1.1"
prost-for-raft = { workspace = true }
raft-proto = { version = "0.7.0", features = ["prost-codec"], default-features = false }

common = { path = "lib/common/common" }
cancel = { path = "lib/common/cancel" }
memory = { path = "lib/common/memory" }
issues = { path = "lib/common/issues" }
segment = { path = "lib/segment" }
collection = { path = "lib/collection" }
storage = { path = "lib/storage" }
api = { path = "lib/api" }
gpu = { path = "lib/gpu" }

actix-multipart = "0.7.2"
constant_time_eq = "0.3.1"

# Profiling
tracing = { workspace = true }
tracing-subscriber = { version = "0.3", features = ["env-filter", "fmt", "json"] }
tracing-log = { version = "0.2", default-features = false, features = ["log-tracer", "std"] }
console-subscriber = { version = "0.4", default-features = false, features = ["parking_lot"], optional = true }
tracing-tracy = { version = "0.11.3", features = ["ondemand"], optional = true }
actix-web-extras = "0.1.0"

[target.'cfg(target_os = "linux")'.dependencies]
# Pyroscope integration
pyroscope = "0.5.8"
pyroscope_pprofrs = "0.2.8"
# Backtrace
rstack-self = { version = "0.3.0", optional = true }

[target.'cfg(all(not(target_env = "msvc"), any(target_arch = "x86_64", target_arch = "aarch64")))'.dependencies]
tikv-jemallocator = { version = "0.6", features = ["stats", "unprefixed_malloc_on_supported_platforms", "background_threads"] }
tikv-jemalloc-ctl = { version = "0.6", features = ["stats"] }

[workspace.lints.clippy]
cast_lossless = "warn"
doc_link_with_quotes = "warn"
enum_glob_use = "warn"
explicit_into_iter_loop = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
from_iter_instead_of_collect = "warn"
implicit_clone = "warn"
inconsistent_struct_constructor = "warn"
inefficient_to_string = "warn"
manual_is_variant_and = "warn"
manual_let_else = "warn"
needless_continue = "warn"
needless_raw_string_hashes = "warn"
ptr_as_ptr = "warn"
ref_option_ref = "warn"
uninlined_format_args = "warn"
unnecessary_wraps = "warn"
unused_self = "warn"
used_underscore_binding = "warn"
match_wildcard_for_single_variants = "warn"
needless_pass_by_ref_mut = "warn"

[workspace.lints.rust]
# https://blog.rust-lang.org/2024/05/06/check-cfg.html#expecting-custom-cfgs
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }

[workspace.dependencies]
ahash = { version = "0.8.11", features = ["serde"] }
atomicwrites = "0.4.4"
bytes = "1.9.0"
chrono = { version = "0.4.39", features = ["serde"] }
criterion = "0.5.1"
data-encoding = "2.6.0"
delegate = "0.13.1"
fnv = "1.0"
futures = "0.3.31"
futures-util = "0.3.30"
generic-tests = "0.1.3"
half = { version = "2.4.1", features = ["alloc", "serde", "num-traits"] }
indexmap = { version = "2", features = ["serde"] }
indicatif = { version = "0.17.9", features = ["rayon"] }
itertools = "0.13.0"
log = "0.4.22"
memmap2 = "0.9.5"
nix = { version = "0.29", features = ["fs"] }
num-traits = "0.2.19"
ordered-float = "4.6"
rayon = "1.10.0"
parking_lot = { version = "0.12.3", features = ["deadlock_detection", "serde"] }
ph = "0.8.5"
pprof = { version = "0.14.0", features = ["flamegraph", "prost-codec"] }
prost = "0.12.6"
prost-build = { version = "0.12.6", features = ["cleanup-markdown"] }
prost-wkt-types = "0.5"
prost-for-raft = { package = "prost", version = "=0.11.9" } # version of prost used by raft
rand = "0.8.5"
reqwest = { version = "0.12.9", default-features = false, features = ["http2", "stream", "rustls-tls", "blocking"] }
schemars = { version = "0.8.21", features = ["uuid1", "preserve_order", "chrono", "url", "indexmap2"] }
semver = { version = "1.0", features = ["serde"] }
serde = { version = "~1.0", features = ["derive", "rc"] }
serde_cbor = "0.11.2"
serde_variant = "0.1.3"
sha2 = "0.10.8"
serde_json = { version = "~1.0", features = ["preserve_order"] }
strum = { version = "0.26.3", features = ["derive"] }
tap = "1.0.1"
tar = "0.4.41"
tempfile = "3.14.0"
tokio = { version = "1.42.0", features = ["full"] }
tokio-util = { version = "0.7", features = ["io", "io-util"] }
tonic = { version = "0.11.0", features = ["gzip", "tls"] }
tonic-build = { version = "0.11.0", features = ["prost"] }
tonic-reflection = "0.11.0"
tracing = { version = "0.1", features = ["async-await"] }
uuid = { version = "1.11", features = ["v4", "serde"] }
validator = { version = "0.18.1", features = ["derive"] }
wal = { git = "https://github.com/qdrant/wal.git", rev = "f42e853debf22a3a746de444d625bb8cc1d2e61e" }
zerocopy = { version = "0.8.14", features = ["derive"] }
atomic_refcell = "0.1.13"
byteorder = "1.5.0"
thiserror = "2.0.9"
bitvec = "1.0.1"
merge = "0.1.0"
dashmap = "6.1"

[[bin]]
name = "schema_generator"
path = "src/schema_generator.rs"
test = false
bench = false
required-features = ["service_debug"]

[[bin]]
name = "wal_inspector"
path = "src/wal_inspector.rs"
test = false
bench = false
required-features = ["service_debug"]

[[bin]]
name = "segment_inspector"
path = "src/segment_inspector.rs"
test = false
bench = false
required-features = ["service_debug"]


[workspace]
members = [
    "lib/api",
    "lib/blob_store",
    "lib/collection",
    "lib/common/*",
    "lib/segment",
    "lib/sparse",
    "lib/storage",
]

[profile.release]
lto = "fat"
codegen-units = 1

# Inherit from release, because we are not rebuilding often,
# and we don't want the huge binary sizes from debug builds.
[profile.ci]
inherits = "release"
lto = false
opt-level = 0

# Inherits by default from release
[profile.bench]
lto = false
debug = true
codegen-units = 256 # restore default value for faster compilation

# Profile for performance testing, which is faster to build than release.
[profile.perf]
inherits = "release"
lto = false
opt-level = 3
codegen-units = 256 # restore default value for faster compilation

# Override for fast sha256 hashing in dev builds
[profile.dev.package.sha2]
opt-level = 3

# Override for fast sha256 hashing in ci builds
[profile.ci.package.sha2]
opt-level = 3

[patch.crates-io]
# Temporary patch until our PRs are merged.
tar = { git = "https://github.com/qdrant/tar-rs", branch = "main" }

[package.metadata.deb]
maintainer = "Qdrant Team <team@qdrant.com>"
depends = "$auto"
default-features = true
features = ["deb"]
license-file = "LICENSE"
section = "database"
priority = "optional"
extended-description = """\
Qdrant is a high-performance vector search engine. It is designed to index and search large collections of high-dimensional vectors.\
"""
assets = [
    ["target/release/qdrant", "usr/bin/", "755"],
    ["README.md", "usr/share/doc/qdrant/README", "644"],
    ["static/*/*", "etc/qdrant/static", "644"],
    ["config/deb.yaml", "etc/qdrant/config.yaml", "644"],
]
